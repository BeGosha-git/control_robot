import requests, time, json
from datetime import datetime

def log(message, level="INFO"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
    timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
    print(f"[{timestamp}] {level}: {message}")

def test_server_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
    log("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")
    try:
        response = requests.get("http://localhost:5000/api/status", timeout=10)
        if response.status_code == 200:
            data = response.json()
            log(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {data}")
            return True
        else:
            log(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            return False
    except Exception as e:
        log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}", "ERROR")
        return False

def test_camera_discovery():
    """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä"""
    log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä...")
    try:
        response = requests.get("http://localhost:5000/api/cameras", timeout=10)
        if response.status_code == 200:
            data = response.json()
            cameras = data.get('cameras', [])
            log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä: {len(cameras)}")
            
            for camera in cameras:
                log(f"   üìπ {camera['name']} (ID: {camera['id']}, "
                   f"{camera['width']}x{camera['height']} @ {camera['fps']}fps)")
            
            return len(cameras)
        else:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä: {response.status_code}")
            return 0
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä: {e}", "ERROR")
        return 0

def test_camera_start_stop():
    """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä"""
    log("üé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä...")
    try:
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–∞–º–µ—Ä
        response = requests.post("http://localhost:5000/api/cameras/start-all", timeout=10)
        if response.status_code == 200:
            data = response.json()
            started_count = data.get('started_count', 0)
            log(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∫–∞–º–µ—Ä: {started_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            time.sleep(2)
            status_response = requests.get("http://localhost:5000/api/status")
            if status_response.status_code == 200:
                status_data = status_response.json()
                log(f"üìä –°—Ç–∞—Ç—É—Å: {status_data['active_cameras']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–µ—Ä")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—ã
            time.sleep(1)
            stop_response = requests.post("http://localhost:5000/api/cameras/stop-all", timeout=10)
            if stop_response.status_code == 200:
                log("‚úÖ –í—Å–µ –∫–∞–º–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return True
            else:
                log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä: {stop_response.status_code}")
                return False
        else:
            log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä: {response.status_code}")
            return False
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}", "ERROR")
        return False

def test_frame_capture(duration=30):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    log(f"üì∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—ã
    try:
        response = requests.post("http://localhost:5000/api/cameras/start-all", timeout=10)
        if response.status_code != 200:
            log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä: {e}", "ERROR")
        return False
    
    # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    frame_counts = {}
    start_time = time.time()
    total_frames_received = 0
    errors = []
    
    log("üé• –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∫–∞–¥—Ä–æ–≤...")
    
    while time.time() - start_time < duration:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–¥—Ä—ã —Å–æ –≤—Å–µ—Ö –∫–∞–º–µ—Ä
            response = requests.get("http://localhost:5000/api/cameras/frames", timeout=5)
            if response.status_code == 200:
                data = response.json()
                frames = data.get('frames', [])
                current_time = time.time()
                
                total_frames_received += len(frames)
                
                for frame_data in frames:
                    camera_id = frame_data['camera_id']
                    
                    if camera_id not in frame_counts:
                        frame_counts[camera_id] = 0
                    
                    frame_counts[camera_id] += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            elapsed = time.time() - start_time
            if int(elapsed) % 5 == 0 and elapsed > 0:
                log(f"‚è±Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å: {elapsed:.1f}/{duration} —Å–µ–∫, "
                   f"–∫–∞–¥—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {total_frames_received}")
            
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤: {e}", "ERROR")
            errors.append({
                'time': time.time(),
                'error': str(e)
            })
            time.sleep(1)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—ã
    try:
        requests.post("http://localhost:5000/api/cameras/stop-all", timeout=10)
        log("‚úÖ –ö–∞–º–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    except Exception as e:
        log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä: {e}", "WARNING")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    log("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤...")
    for camera_id in frame_counts:
        total_frames = frame_counts[camera_id]
        avg_fps = total_frames / duration if duration > 0 else 0
        
        log(f"   üìπ –ö–∞–º–µ—Ä–∞ {camera_id}: {total_frames} –∫–∞–¥—Ä–æ–≤, "
           f"—Å—Ä–µ–¥–Ω–∏–π FPS: {avg_fps:.2f}")
    
    log(f"üì∏ –í—Å–µ–≥–æ –∫–∞–¥—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {total_frames_received}")
    if errors:
        log(f"üö® –û—à–∏–±–æ–∫: {len(errors)}")
    
    return True

def test_individual_camera_control():
    """–¢–µ—Å—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–∞–º–∏"""
    log("üéõÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–∞–º–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä
        response = requests.get("http://localhost:5000/api/cameras", timeout=10)
        if response.status_code != 200:
            log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä")
            return False
        
        cameras = response.json().get('cameras', [])
        if not cameras:
            log("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return True
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞–º–µ—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
        for camera in cameras[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∫–∞–º–µ—Ä—ã
            camera_id = camera['id']
            log(f"üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã {camera_id}...")
            
            # –ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã
            start_response = requests.post(f"http://localhost:5000/api/camera/{camera_id}/start", timeout=10)
            if start_response.status_code == 200:
                log(f"   ‚úÖ –ö–∞–º–µ—Ä–∞ {camera_id} –∑–∞–ø—É—â–µ–Ω–∞")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞–¥—Ä
                time.sleep(1)
                frame_response = requests.get(f"http://localhost:5000/api/camera/{camera_id}/frame", timeout=5)
                if frame_response.status_code == 200:
                    frame_data = frame_response.json()
                    log(f"   üì∏ –ü–æ–ª—É—á–µ–Ω –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã {camera_id}")
                else:
                    log(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã {camera_id}")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
                stop_response = requests.post(f"http://localhost:5000/api/camera/{camera_id}/stop", timeout=10)
                if stop_response.status_code == 200:
                    log(f"   ‚úÖ –ö–∞–º–µ—Ä–∞ {camera_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    log(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä—ã {camera_id}")
            else:
                log(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É {camera_id}")
        
        return True
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}", "ERROR")
        return False

def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    log("üö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞–º–µ—Ä—ã
    try:
        response = requests.get("http://localhost:5000/api/camera/999/frame", timeout=5)
        if response.status_code == 404:
            log("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞–º–µ—Ä—ã")
        else:
            log(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞–º–µ—Ä—ã: {response.status_code}")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞–º–µ—Ä—ã: {e}", "ERROR")
    
    # –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã
    try:
        response = requests.post("http://localhost:5000/api/camera/999/stop", timeout=5)
        if response.status_code == 404:
            log("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã")
        else:
            log(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã: {response.status_code}")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã: {e}", "ERROR")
    
    return True

def run_comprehensive_test(duration=30):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–º–µ—Ä...")
    start_time = time.time()
    
    tests_passed = 0
    tests_failed = 0
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    if test_server_connection():
        tests_passed += 1
    else:
        tests_failed += 1
        log("‚ùå –¢–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω - —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "ERROR")
        return False
    
    # –¢–µ—Å—Ç 2: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä
    camera_count = test_camera_discovery()
    if camera_count == 0:
        log("‚ö†Ô∏è –ö–∞–º–µ—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "WARNING")
    
    # –¢–µ—Å—Ç 3: –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä
    if test_camera_start_stop():
        tests_passed += 1
    else:
        tests_failed += 1
    
    # –¢–µ—Å—Ç 4: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–∞–º–∏
    if test_individual_camera_control():
        tests_passed += 1
    else:
        tests_failed += 1
    
    # –¢–µ—Å—Ç 5: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–æ–≤
    if test_frame_capture(duration):
        tests_passed += 1
    else:
        tests_failed += 1
    
    # –¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if test_error_handling():
        tests_passed += 1
    else:
        tests_failed += 1
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    end_time = time.time()
    total_duration = end_time - start_time
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    log("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    log("=" * 50)
    log(f"‚è±Ô∏è –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")
    log(f"‚úÖ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {tests_passed}")
    log(f"‚ùå –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: {tests_failed}")
    
    success_rate = (tests_passed / (tests_passed + tests_failed)) * 100
    log(f"üéØ –£–°–ü–ï–®–ù–û–°–¢–¨: {success_rate:.1f}%")
    
    if success_rate >= 80:
        log("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û!")
    else:
        log("‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé• –†–ê–°–®–ò–†–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–†–í–ò–°–ê –ö–ê–ú–ï–†")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
    success = run_comprehensive_test(duration=30)
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")

if __name__ == '__main__':
    main()
