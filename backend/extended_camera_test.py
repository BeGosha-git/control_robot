#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–º–µ—Ä —Å 30-—Å–µ–∫—É–Ω–¥–Ω—ã–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import requests
import json
import time
import threading
from datetime import datetime
import statistics

class ExtendedCameraTest:
    def __init__(self, base_url="http://localhost:5000"):
        self.base_url = base_url
        self.test_results = {
            'start_time': None,
            'end_time': None,
            'duration': 0,
            'tests_passed': 0,
            'tests_failed': 0,
            'total_frames_received': 0,
            'frame_rates': {},
            'errors': [],
            'performance_metrics': {}
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        print(f"[{timestamp}] {level}: {message}")
        
    def test_server_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        self.log("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        try:
            response = requests.get(f"{self.base_url}/api/status", timeout=5)
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {data}")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
                return False
        except Exception as e:
            self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}", "ERROR")
            return False
    
    def test_camera_discovery(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä"""
        self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä...")
        try:
            response = requests.get(f"{self.base_url}/api/cameras", timeout=10)
            if response.status_code == 200:
                data = response.json()
                cameras = data.get('cameras', [])
                self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä: {len(cameras)}")
                
                for camera in cameras:
                    self.log(f"   üìπ {camera['name']} (ID: {camera['id']}, "
                           f"{camera['width']}x{camera['height']} @ {camera['fps']}fps)")
                
                return len(cameras)
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä: {response.status_code}")
                return 0
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä: {e}", "ERROR")
            return 0
    
    def test_camera_start_stop(self):
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä"""
        self.log("üé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä...")
        try:
            # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–∞–º–µ—Ä
            response = requests.post(f"{self.base_url}/api/cameras/start-all", timeout=10)
            if response.status_code == 200:
                data = response.json()
                started_count = data.get('started_count', 0)
                self.log(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∫–∞–º–µ—Ä: {started_count}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                time.sleep(2)
                status_response = requests.get(f"{self.base_url}/api/status")
                if status_response.status_code == 200:
                    status_data = status_response.json()
                    self.log(f"üìä –°—Ç–∞—Ç—É—Å: {status_data['active_cameras']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–µ—Ä")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—ã
                time.sleep(1)
                stop_response = requests.post(f"{self.base_url}/api/cameras/stop-all", timeout=10)
                if stop_response.status_code == 200:
                    self.log("‚úÖ –í—Å–µ –∫–∞–º–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                    return True
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä: {stop_response.status_code}")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä: {response.status_code}")
                return False
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}", "ERROR")
            return False
    
    def test_frame_capture(self, duration=30):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        self.log(f"üì∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—ã
        try:
            response = requests.post(f"{self.base_url}/api/cameras/start-all", timeout=10)
            if response.status_code != 200:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä: {e}", "ERROR")
            return False
        
        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        frame_counts = {}
        frame_times = {}
        start_time = time.time()
        last_frame_times = {}
        
        self.log("üé• –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∫–∞–¥—Ä–æ–≤...")
        
        while time.time() - start_time < duration:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞–¥—Ä—ã —Å–æ –≤—Å–µ—Ö –∫–∞–º–µ—Ä
                response = requests.get(f"{self.base_url}/api/cameras/frames", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    frames = data.get('frames', [])
                    current_time = time.time()
                    
                    self.test_results['total_frames_received'] += len(frames)
                    
                    for frame_data in frames:
                        camera_id = frame_data['camera_id']
                        
                        if camera_id not in frame_counts:
                            frame_counts[camera_id] = 0
                            frame_times[camera_id] = []
                            last_frame_times[camera_id] = current_time
                        
                        frame_counts[camera_id] += 1
                        frame_times[camera_id].append(current_time)
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º FPS
                        if len(frame_times[camera_id]) > 1:
                            time_diff = current_time - last_frame_times[camera_id]
                            if time_diff > 0:
                                fps = 1.0 / time_diff
                                if camera_id not in self.test_results['frame_rates']:
                                    self.test_results['frame_rates'][camera_id] = []
                                self.test_results['frame_rates'][camera_id].append(fps)
                        
                        last_frame_times[camera_id] = current_time
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                elapsed = time.time() - start_time
                if int(elapsed) % 5 == 0 and elapsed > 0:
                    self.log(f"‚è±Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å: {elapsed:.1f}/{duration} —Å–µ–∫, "
                           f"–∫–∞–¥—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {self.test_results['total_frames_received']}")
                
                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤: {e}", "ERROR")
                self.test_results['errors'].append({
                    'time': time.time(),
                    'error': str(e)
                })
                time.sleep(1)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—ã
        try:
            requests.post(f"{self.base_url}/api/cameras/stop-all", timeout=10)
            self.log("‚úÖ –ö–∞–º–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä: {e}", "WARNING")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤...")
        for camera_id in frame_counts:
            total_frames = frame_counts[camera_id]
            avg_fps = total_frames / duration if duration > 0 else 0
            
            if camera_id in self.test_results['frame_rates']:
                fps_values = self.test_results['frame_rates'][camera_id]
                if fps_values:
                    avg_fps_calculated = statistics.mean(fps_values)
                    max_fps = max(fps_values)
                    min_fps = min(fps_values)
                else:
                    avg_fps_calculated = avg_fps
                    max_fps = min_fps = avg_fps
            else:
                avg_fps_calculated = avg_fps
                max_fps = min_fps = avg_fps
            
            self.log(f"   üìπ –ö–∞–º–µ—Ä–∞ {camera_id}: {total_frames} –∫–∞–¥—Ä–æ–≤, "
                   f"—Å—Ä–µ–¥–Ω–∏–π FPS: {avg_fps_calculated:.2f} "
                   f"(–º–∏–Ω: {min_fps:.2f}, –º–∞–∫—Å: {max_fps:.2f})")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.test_results['performance_metrics'][f'camera_{camera_id}'] = {
                'total_frames': total_frames,
                'avg_fps': avg_fps_calculated,
                'max_fps': max_fps,
                'min_fps': min_fps,
                'duration': duration
            }
        
        return True
    
    def test_individual_camera_control(self):
        """–¢–µ—Å—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–∞–º–∏"""
        self.log("üéõÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–∞–º–∏...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä
            response = requests.get(f"{self.base_url}/api/cameras", timeout=10)
            if response.status_code != 200:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä")
                return False
            
            cameras = response.json().get('cameras', [])
            if not cameras:
                self.log("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return True
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞–º–µ—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
            for camera in cameras[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∫–∞–º–µ—Ä—ã
                camera_id = camera['id']
                self.log(f"üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã {camera_id}...")
                
                # –ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã
                start_response = requests.post(f"{self.base_url}/api/camera/{camera_id}/start", timeout=10)
                if start_response.status_code == 200:
                    self.log(f"   ‚úÖ –ö–∞–º–µ—Ä–∞ {camera_id} –∑–∞–ø—É—â–µ–Ω–∞")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–¥—Ä
                    time.sleep(1)
                    frame_response = requests.get(f"{self.base_url}/api/camera/{camera_id}/frame", timeout=5)
                    if frame_response.status_code == 200:
                        frame_data = frame_response.json()
                        self.log(f"   üì∏ –ü–æ–ª—É—á–µ–Ω –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã {camera_id}")
                    else:
                        self.log(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã {camera_id}")
                    
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
                    stop_response = requests.post(f"{self.base_url}/api/camera/{camera_id}/stop", timeout=10)
                    if stop_response.status_code == 200:
                        self.log(f"   ‚úÖ –ö–∞–º–µ—Ä–∞ {camera_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    else:
                        self.log(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä—ã {camera_id}")
                else:
                    self.log(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É {camera_id}")
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}", "ERROR")
            return False
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        self.log("üö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞–º–µ—Ä—ã
        try:
            response = requests.get(f"{self.base_url}/api/camera/999/frame", timeout=5)
            if response.status_code == 404:
                self.log("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞–º–µ—Ä—ã")
            else:
                self.log(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞–º–µ—Ä—ã: {response.status_code}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞–º–µ—Ä—ã: {e}", "ERROR")
        
        # –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã
        try:
            response = requests.post(f"{self.base_url}/api/camera/999/stop", timeout=5)
            if response.status_code == 404:
                self.log("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã")
            else:
                self.log(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã: {response.status_code}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã: {e}", "ERROR")
        
        return True
    
    def run_comprehensive_test(self, duration=30):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–º–µ—Ä...")
        self.test_results['start_time'] = time.time()
        
        # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        if not self.test_server_connection():
            self.log("‚ùå –¢–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω - —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "ERROR")
            return False
        
        # –¢–µ—Å—Ç 2: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä
        camera_count = self.test_camera_discovery()
        if camera_count == 0:
            self.log("‚ö†Ô∏è –ö–∞–º–µ—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "WARNING")
        
        # –¢–µ—Å—Ç 3: –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä
        if self.test_camera_start_stop():
            self.test_results['tests_passed'] += 1
        else:
            self.test_results['tests_failed'] += 1
        
        # –¢–µ—Å—Ç 4: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–∞–º–∏
        if self.test_individual_camera_control():
            self.test_results['tests_passed'] += 1
        else:
            self.test_results['tests_failed'] += 1
        
        # –¢–µ—Å—Ç 5: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–æ–≤
        if self.test_frame_capture(duration):
            self.test_results['tests_passed'] += 1
        else:
            self.test_results['tests_failed'] += 1
        
        # –¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if self.test_error_handling():
            self.test_results['tests_passed'] += 1
        else:
            self.test_results['tests_failed'] += 1
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_results['end_time'] = time.time()
        self.test_results['duration'] = self.test_results['end_time'] - self.test_results['start_time']
        
        self.print_final_report()
        return True
    
    def print_final_report(self):
        """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        self.log("=" * 50)
        self.log(f"‚è±Ô∏è –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.test_results['duration']:.2f} —Å–µ–∫—É–Ω–¥")
        self.log(f"‚úÖ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {self.test_results['tests_passed']}")
        self.log(f"‚ùå –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.test_results['tests_failed']}")
        self.log(f"üì∏ –í—Å–µ–≥–æ –∫–∞–¥—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {self.test_results['total_frames_received']}")
        
        if self.test_results['performance_metrics']:
            self.log("\nüìä –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
            for camera_id, metrics in self.test_results['performance_metrics'].items():
                self.log(f"   {camera_id}:")
                self.log(f"     - –ö–∞–¥—Ä–æ–≤: {metrics['total_frames']}")
                self.log(f"     - –°—Ä–µ–¥–Ω–∏–π FPS: {metrics['avg_fps']:.2f}")
                self.log(f"     - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π FPS: {metrics['max_fps']:.2f}")
                self.log(f"     - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π FPS: {metrics['min_fps']:.2f}")
        
        if self.test_results['errors']:
            self.log(f"\nüö® –û–®–ò–ë–ö–ò ({len(self.test_results['errors'])}):")
            for error in self.test_results['errors'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                self.log(f"   - {error['error']}")
        
        success_rate = (self.test_results['tests_passed'] / 
                       (self.test_results['tests_passed'] + self.test_results['tests_failed'])) * 100
        self.log(f"\nüéØ –£–°–ü–ï–®–ù–û–°–¢–¨: {success_rate:.1f}%")
        
        if success_rate >= 80:
            self.log("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û!")
        else:
            self.log("‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé• –†–ê–°–®–ò–†–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–†–í–ò–°–ê –ö–ê–ú–ï–†")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–µ—Ä–∞
    tester = ExtendedCameraTest()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
    success = tester.run_comprehensive_test(duration=30)
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")

if __name__ == '__main__':
    main()
